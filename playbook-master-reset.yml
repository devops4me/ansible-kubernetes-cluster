---
#
# This playbook will take a master node that has undergone the basic setup applied
# in the all-nodes-playbook.yml and makes the single node the first master node.
#
# After this playbook executes the log output will provide a token and sha56 hash
# that are required for workers to join this cluster.
#
# Take the token and hash and run the worker-join-playbook to get new worker nodes
# to join the cluster.
#
- hosts: all
  become: true
  name: Configure the Kubernetes Cluster Nodes
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Output master hostname and IP address to local file
    local_action: copy content="master host name = {{ hostvars['master']['ansible_hostname'] }}\nmaster ipaddress = {{ hostvars['master']['ansible_default_ipv4']['address'] }}\n" dest=master-hostname-address.txt
    become: false

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=arm64] https://download.docker.com/linux/ubuntu focal stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce=5:19.03.15~3-0~ubuntu-focal
      - docker-ce-cli=5:19.03.15~3-0~ubuntu-focal
####      - containerd.io
##    notify:
##      - docker status

  - name: Add ubuntu user to docker group
    user:
      name: ubuntu
      group: docker

  - name: Write docker daemon.json to all nodes
    copy:
      dest: /etc/docker/daemon.json
      content: "{ \"exec-opts\": [\"native.cgroupdriver=systemd\"] }"

  - name: Restart Docker to switch cgroup driver to systemd
    become: true
    command: systemctl restart docker

  - name: When machine restarts get Docker to startup
    become: true
    command: systemctl enable docker

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl
#####        - kubernetes-cni

#####################################
######## IMPORTANT NOTE #############
#####################################
######## 
######## WHEN I LOGGED IN to the worker at this point docker ps -a said permission denied
######## Even when I exited emacs it still said permission denied
######## So I rebooted the worker.
######## Then doker ps -a worked like a dream (okay a list of zero containers)
######## If this trial line works we need to experiment to see if this reboot is significant.
######## 
######## Can we prove that rushing forward without reboot fails and rebooting all works?
######## If so we can look for a solution.
######## 
#####################################

##### 
##### sudo kubeadm init --control-plane-endpoint=pi-r1d1
##### 
##### 
##### 

- hosts: master
  become: true
  name: Setup control plane and make kubectl talk to cluster
  tasks:

#  - name: Remove previously installed Calico Pod Networking
#    become: false
#    command: kubectl delete -f https://docs.projectcalico.org/manifests/calico.yaml
#    delegate_to: localhost

#  - name: Reset any previous installs run by kubeadm init
#    become: true
#    command: kubeadm reset --force

#  - name: Initialize the Kubernetes cluster using kubeadm
#    command: kubeadm init --apiserver-advertise-address="{{ ansible_default_ipv4['address'] }}" --apiserver-cert-extra-sans="{{ ansible_hostname }}" --node-name={{ ansible_hostname }} --pod-network-cidr=192.168.0.0/24 --token=wls1ik.grvjcscyd0xrysrx
#    register: kubeadm_init_output

#  - name: Store the Logs generated by the kubeadm cluster initialize command
#    local_action: copy content={{ kubeadm_init_output.stdout }} dest=kubeadm-init-output.log
#    become: false

#  - name: Fetch kubectl config for laptop (ansible host) to use
#    fetch:
#      src: /etc/kubernetes/admin.conf
#      dest: kubectl-configuration.yml
#      backup: yes
#      flat: yes

#  - name: Copy to local user so laptop kubectl connects to cluster
#    become: false
#    copy:
#      src: kubectl-configuration.yml
#      dest: ~/.kube/config
#      backup: yes
#    delegate_to: localhost

#  - name: Install Calico Pod Networking from laptop kubectl
#    become: false
#    command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
#    delegate_to: localhost

#  - name: Generate join command
#    command: kubeadm token create --print-join-command
#    become: true
#    register: join_command

#  - name: Copy join command to local file
#    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="node-join-cmd.sh"
#    become: false

#- hosts: worker
#  become: true
#  name: Get each Worker to Join the Cluster
#  tasks:
#  - name: Reset any previous worker joins orchestrated by kubeadm join
#    become: true
#    command: kubeadm reset --force

#####  - name: Append node IP address to the cluster join command
#####    local_action: command 'echo "$(cat node-join-cmd.sh) --node-name={{ node_ip }}" > node-{{ node_index }}-join-cmd.sh'
#####    become: false

#####  - name: Copy the join command to server location
#####    copy: src=node-{{ node_index }}-join-cmd.sh dest=/tmp/join-command.sh mode=0777

#  - name: Join the node to cluster
#    command: kubeadm join {{ hostvars['master']['ansible_hostname'] }}:6443 --token wls1ik.grvjcscyd0xrysrx --discovery-token-unsafe-skip-ca-verification --node-name={{ ansible_hostname }}
